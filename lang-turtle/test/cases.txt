# Empty


==>

TurtleDoc()



# NTriple style triple

<subject> <predicate> <object> .

==>


TurtleDoc(
 Triples(
  Subject(IRIREF),
  Verb(IRIREF),
  Object(IRIREF)
 )
)

# With blank nodes

_:alice <knows> _:546645 .

==>

TurtleDoc(
 Triples(
   Subject(BlankNode),
   Verb(IRIREF),
   Object(BlankNode)
 )
)


# With an IRI with a #

_:toto rdf:type <http://bruy.at/prec#NodeRule> .

==>

TurtleDoc(
 Triples(
  Subject(BlankNode),
  Verb(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Object(IRIREF)
 )
)

# Multiple triples

ex:toto rdf:type ex:Person .
ex:toto ex:name "Toto" .

==>
TurtleDoc(
 Triples(
  Subject(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Verb(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Object(PrefixedName(PN_PREFIX, PN_LOCAL))
 ),
 Triples(
  Subject(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Verb(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Object(Literal)
 )
)


# Turtle multitriples

ex:toto a ex:Person ; rdf:type _:person , _:guynamedtoto .

==> 
TurtleDoc(
 Triples(
  Subject(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Verb(),
  Object(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Verb(PrefixedName(PN_PREFIX, PN_LOCAL)),
  Object(BlankNode),
  Object(BlankNode)
 )
)


# Anon blank nodes

_:toto :knows [  ] .

==>
TurtleDoc(
 Triples(
  Subject(BlankNode),
  Verb(PrefixedName(PN_LOCAL)),
  Object(Anon)
 )
)

